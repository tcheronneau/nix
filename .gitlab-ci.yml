stages:
  - update
  - build
  - release

variables:
  GIT_STRATEGY: clone
  GIT_CLEAN_FLAGS: none
  NAME: 
    value: ""
    description: "Package name to update and build"
  VERSION:
    value: ""
    description: "Version of the package"

update::version:
  stage: update
  image: local
  rules:
  - if: $CI_PIPELINE_SOURCE == "api"
  tags:
    - nix
  script:
    - if [ -f "${NAME}"/default.nix ]; then export CURR_VERSION=$(cat ./${NAME}/default.nix|awk -F'"' '/version =/ {print $2;} ') ; fi
    - |
      echo "New version : ${VERSION}"
      if [ "${CURR_VERSION}" == "${VERSION}" ]
      then
        echo "Version matched doing nothing"
      else
        echo "Version mismatch updating..."
        sed -i "s/version = \"${CURR_VERSION}/version = \"${VERSION}/g" ${NAME}/default.nix
      fi
  artifacts:
    paths:
      - ${NAME}/
    expire_in: '600'

build::package:
  stage: build
  image: local
  rules:
  - if: $CI_PIPELINE_SOURCE == "api"
  dependencies:
  - update::version
  tags: 
    - nix
  script: 
    - cd ${NAME}
    - nix-build -E 'with import <nixos-unstable> {}; callPackage ./default.nix {}'

release::package:
  stage: release
  image: local
  dependencies:
  - update::version
  rules:
  - if: $CI_PIPELINE_SOURCE == "api"
  tags:
    - nix
  script:
    - git config --global user.email "abott@mcth.fr"
    - git config --global user.name "Abott"
    - git add ${NAME} 
    - git commit -m "Releasing new version for ${NAME} from $CI_COMMIT_SHORT_SHA [skip ci]" || echo "No changes, nothing to commit!"
    - git push origin main 
